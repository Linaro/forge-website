name: Deploy Main

on:
  push:
    branches: [main]
  workflow_dispatch:

# Cancel in-progress jobs or runs for the current workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  process:
    runs-on: self-hosted
    environment: main
    steps:
      - name: Fetch git repository
        uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 0
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Initialise environment
        run: cat "$GITHUB_WORKSPACE/.github-env-${GITHUB_REF##*/}" >> $GITHUB_ENV
      - name: Check site
        run: cd "$GITHUB_WORKSPACE/forge-website" && yarn install && yarn run lint
      - name: Wipe previous export
        run: |
          cd "$GITHUB_WORKSPACE/forge-website"
          if [ -d out ]; then rm -r out; fi
      - name: Build site
        run: cd "$GITHUB_WORKSPACE/forge-website" && yarn install && yarn run export
      - name: Sync to S3
        run: |
          cd "$GITHUB_WORKSPACE/forge-website/out"
          # Sync HTML files with different cache settings. Using "no-cache" does *NOT* mean that the file is not
          # cached - it just forces the browser to do a quick check upstream to make sure that the page is valid.
          aws --profile "$AWS_STATIC_SITE_PROFILE" s3 sync --exclude "*" --include "*.html" --cache-control "no-cache, max-age=86400" ./ "s3://$AWS_STATIC_SITE_URL" --delete --no-progress
          # Sync non-HTML files with "normal" cache settings.
          aws --profile "$AWS_STATIC_SITE_PROFILE" s3 sync --include "*" --exclude "*.html" --cache-control "public, max-age=86400" ./ "s3://$AWS_STATIC_SITE_URL" --delete --no-progress
      - name: Invalidate CloudFront cache
        run: |
          echo "======== CREATING INVALIDATION ========"
          invID=$(aws --profile "$AWS_STATIC_SITE_PROFILE" cloudfront create-invalidation \
          --distribution-id "$CF_DIST_ID_STATIC_LO" --paths "/*" --query Invalidation.Id --output text)
          export invID
          echo "======== INVALIDATION ID ========"
          echo "${invID}"
          echo "======== POLLING COMPLETED INVALIDATION ========"
          until aws --profile "$AWS_STATIC_SITE_PROFILE" cloudfront wait invalidation-completed \
            --distribution-id "$CF_DIST_ID_STATIC_LO" --id "${invID}" 2>/dev/null
          do
            # Still waiting - output some progress
            echo "Still waiting ..."
            aws --profile "$AWS_STATIC_SITE_PROFILE" cloudfront get-invalidation \
              --distribution-id "$CF_DIST_ID_STATIC_LO" --id "${invID}"
            sleep 10
          done
          # and final confirmation
          aws --profile "$AWS_STATIC_SITE_PROFILE" cloudfront get-invalidation \
            --distribution-id "$CF_DIST_ID_STATIC_LO" --id "${invID}"
          echo "======== INVALIDATION COMPLETED ========"
      - name: Update routing rules
        run: |
          CF_DIST_ID_STATIC_LO="E2WREK9TKMY5OS" LAMBDA_ROLE="arn:aws:iam::493521345843:role/service-role/lambda-redirect-role" AWS_STATIC_SITE_URL="docs-linaroforge-com" AWS_STATIC_SITE_PROFILE="www-linaroforge-com-buildbot" /srv/github-action-scripts/set-up-lambda-redirect.sh ${{ github.workspace }}/forge-website/
          CF_DIST_ID_STATIC_LO="E2F4DDTQ2FL7GQ" LAMBDA_ROLE="arn:aws:iam::493521345843:role/service-role/lambda-redirect-role" AWS_STATIC_SITE_URL="downloads-linaroforge-com" AWS_STATIC_SITE_PROFILE="www-linaroforge-com-buildbot" /srv/github-action-scripts/set-up-lambda-redirect.sh ${{ github.workspace }}/forge-website/
